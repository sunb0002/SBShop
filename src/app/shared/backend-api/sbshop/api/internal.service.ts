/**
 * SBShop Spring Demo (SpringBoot-DEV1)
 * Kyouko is my waifu
 *
 * OpenAPI spec version: 1.0.0-Madoka-SpringBoot
 * Contact: incubator@dev1.madoka.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { HomeResponse } from '../model/homeResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class InternalService {

    protected basePath = 'https://localhost:8080/springdemo';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * allHail
     * Get successful message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public allHailUsingGET(observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public allHailUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public allHailUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public allHailUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<HomeResponse>(`${this.basePath}/home/json200`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * generateJwt
     * Generate Jwt
     * @param userName User name in JWT payload.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateJwtUsingPOST(userName: string, observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public generateJwtUsingPOST(userName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public generateJwtUsingPOST(userName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public generateJwtUsingPOST(userName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (userName === null || userName === undefined) {
            throw new Error('Required parameter userName was null or undefined when calling generateJwtUsingPOST.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];
        let httpContentTypeSelected:string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set("Content-Type", httpContentTypeSelected);
        }

        return this.httpClient.post<HomeResponse>(`${this.basePath}/home/generateJWT`,
            userName,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * test403
     * Get unsuccessful message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public test403UsingGET(observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public test403UsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public test403UsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public test403UsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<HomeResponse>(`${this.basePath}/home/json403`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * testAnything
     * Test anything
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testAnythingUsingGET(observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public testAnythingUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public testAnythingUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public testAnythingUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<HomeResponse>(`${this.basePath}/home/json200MK2`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * testMQ
     * Test Message Queue
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testMQUsingGET(observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public testMQUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public testMQUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public testMQUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<HomeResponse>(`${this.basePath}/home/json200MQ`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * testMail
     * Test sending email
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public testMailUsingGET(observe?: 'body', reportProgress?: boolean): Observable<HomeResponse>;
    public testMailUsingGET(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<HomeResponse>>;
    public testMailUsingGET(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<HomeResponse>>;
    public testMailUsingGET(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        let httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set("Accept", httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        let consumes: string[] = [
            'application/json'
        ];

        return this.httpClient.get<HomeResponse>(`${this.basePath}/home/json200Mail`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
